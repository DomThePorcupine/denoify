#!/usr/bin/env node
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var commanderStatic = require("commander");
var path = require("path");
var index_1 = require("../lib/index");
commanderStatic
    .description("\n    A build tool to make node modules written in TypeScript cross compatible with Deno.\n\n    It allow to support deno and all the other JS runtime environnement with a single codebase.\n\n    At this stage of it's development this tools only fix import/export and thus will \n    only works on projects that do not use any node specific API like global, process ect...\n    However it is enough to port a large quantity of libraries.\n\n    You must provide a deno por for each of the dependencies that have not been made cross \n    cross compatible with this module:\n\n    Example: \n        - If your project use: \"js-yaml\" you can specify the deno port \"https://deno.land/x/js_yaml_port/js-yaml.js\"\n        - If your project use \"run-exclusive\" you don't have to specify a port as \"run-exclusive\" has been made cross compatible with this module.\n\n    If you are not the author of a dependency you can fork it on github and denoify it yourself.\n\n    (garronej/denoify) /res/my-module contain an example module with denoify setup.\n    You can also have a look at:\n    - https://www.npmjs.com/package/evt OR\n    - https://www.npmjs.com/package/run-exclusive\n    Two package that have been made cross compatible using denoify.\n\n    Here is how a project should be setup to work with denoify:\n\n    package.json:\n    {\n        \"name\": \"my-module\",\n        \"main\": \"./dist/lib/index.js\",\n        ...\n        \"dependencies\": {\n            \"run-exclusive\": \"^2.1.6\", \n            \"js-yaml\": \"^3.13.1\"\n        }\n        ...\n        \"deno\": {\n            //Url to specify so other package using \"my-module\" can be made cross compatible with denoify.\n            \"url\": \"https://deno.land/x/my_module\" //Or https://raw.githubusercontent.com/[user/org]/my-module/[commit hash or 'master']/ \n            \"dependenciesPorts\": {\n                \"js-yaml\": \"https://deno.land/x/js_yaml_port/js-yaml.js\" \n            }\n        },\n        ...\n        \"scripts\" {\n            \"tsc\": \"npx tsc\",\n            \"denoify\": \"npx denoify\",\n            \"build\": \"npm run tsc && npm run denoify\"\n        },\n        ...\n        \"devDependencies\": {\n            \"denoify\": \"github:garronej/denoify\"\n        }\n        \"files\": [ // If you cherry-pick the files included in the npm bundle you must include tsconfig\n            \"/dist/lib\",\n            \"/src/lib\",\n            \"/tsconfig.json\"\n        ]\n\n    }\n\n    tsconfig.json:\n    {\n        ...\n        \"compilerOptions\": {\n            ...\n            \"outDir\": \"./dist\", // Must use the outDir option\n            ...\n        },\n        \"filesGlob\": [\n            \"src/**/*\"\n        ],\n        \"exclude\": [ // Must also use explicit exclude to ignore ts files generated for deno.\n            \"node_modules\",\n            \"dist/**/*\",\n            \"deno_dist/**/*\", \n            \"./mod.ts\" \n        ]\n    }\n\n    When running '$ npm run denoify', './deno_dist' alongside with './mod.ts'\n    \n    Examples of transformations that will take place from ./src to ./deno_dist\n\n    import { Cat } from \"./interfaces/Cat\"                      => import { Cat } from \"./interfaces/Cat.ts\"\n    import { Cat } from \"./interfaces\"                          => import { Cat } from \"./interfaces/index.ts\"\n    import { load } from \"js-yaml\"                              => import { load } from \"https://deno.land/x/js_yaml_port/js-yaml.js\"\n    import * as runExclusive from \"run-exclusive\"               => import * as runExclusive from \"https://deno.land/x/run_exclusive/mod.js\"\n    import { build } from \"run-exclusive/dist/lib/runExclusive\" => import { build } from \"https://deno.land/x/run_exclusive/deno_dist/lib/runExclusive.ts\"\n\n    The mod.ts file will contain 'export * from \"./deno_dist/lib/index.ts\";' ( path computed from package.json->main )\n\n    The devDependencies does not necessarily have to be met.\n    ")
    .option("-p, --project [projectPath]", "Default: './' -- Denoify the project given to a folder with a 'package.json' and 'tsconfig.json'.")
    .option("--src [srcDirPath]", "Default: '[projectPath]/src' | '[projectPath]/lib' -- Path to the directory containing the source .ts files.");
commanderStatic.parse(process.argv);
index_1.run({
    "projectPath": path.resolve((_a = commanderStatic["projectPath"]) !== null && _a !== void 0 ? _a : "."),
    "srcDirPath": commanderStatic["srcDirPath"],
});
