
import { denoifySingleFileFactory } from "./denoifySingleFile";
import { transformCodebase } from "./transformCodebase";
import { resolveFactory } from "./resolve";
import * as fs from "fs";
import * as path from "path";
import * as commentJson from "comment-json";
import {Â denoifyImportArgumentFactory } from "./denoifyImportArgument";

export async function denoify(
    {
        projectPath,
        srcDirPath = ["src", "lib"]
            .find(name => fs.existsSync(path.join(projectPath, name)))!
    }: {
        projectPath: string;
        srcDirPath?: string;
    }
) {

    const packageJsonParsed = require(path.join(projectPath, "package.json"));

    const { denoifySingleFile } = denoifySingleFileFactory((() => {

        const { denoifyImportArgument } = denoifyImportArgumentFactory((() => {

            const { resolve } = resolveFactory({
                projectPath,
                "userProvidedPorts": packageJsonParsed["denoPorts"] ?? {},
                "dependencies": packageJsonParsed["dependencies"] ?? {},
                "devDependencies": packageJsonParsed["devDependencies"] ?? {},
                "log": console.log
            });

            return { resolve };


        })());

        return { denoifyImportArgument };

    })());



    const tsconfigOutDir = commentJson.parse(
        fs.readFileSync(
            path.join(projectPath, "tsconfig.json")
        ).toString("utf8")
    )["compilerOptions"]["outDir"]; // ./dist

    const denoDistPath = path.join(
        path.dirname(tsconfigOutDir),
        `deno_${path.basename(tsconfigOutDir)}`
    ); // ./deno_dist

    await transformCodebase({
        "srcDirPath": path.join(projectPath, srcDirPath),
        "destDirPath": path.join(
            projectPath,
            denoDistPath
        ),
        "transformSourceCodeString": ({ extension, sourceCode, fileDirPath }) =>
            /^\.?ts$/i.test(extension) || /^\.?js$/i.test(extension) ?
                denoifySingleFile({ sourceCode, fileDirPath })
                :
                Promise.resolve(sourceCode)
    });

    fs.writeFileSync(
        path.join(projectPath, "mod.ts"),
        Buffer.from([
            `//Automatically generated by denoify.`,
            ` It is important not to edit this file.\n`,
            `export * from "`,
            "./" + path.join(
                denoDistPath,
                path.relative(
                    tsconfigOutDir,
                    packageJsonParsed.main // ./dist/lib/index.js
                ) // ./lib/index.js
            ) // ./deno_dist/lib/index.js
                .replace(/\.js$/i, ".ts"), // ./deno_dist/lib/index.ts
            `";`
        ].join(""), "utf8")
    );

}

