
import * as fs from "fs";
import * as path from "path";

export namespace modTsFile {

    export type Metadata = { 
        srcDirPath: string; 
        denoDistPath: string;
        tsconfigOutDir: string;
    };

    /** create [projectPath]/mod.ts file */
    export function create(params: {
        projectPath: string; // .
        tsFilePath: string; // deno_dist/lib/index.ts 
        metadata?: Metadata;
        isDryRun: boolean;
    }) {

        const { projectPath, isDryRun } = params;

        const tsFilePath = params.tsFilePath.replace(/\\/g, "/");

        const modTsRaw = [
            `//Automatically generated by denoify.`,
            ` It is important not to edit this file.\n`,
            ("metadata" in params) ? `// #${JSON.stringify(params.metadata)}#\n\n` : "",
            `export * from "${tsFilePath.startsWith("./") ? "" : "./"}${tsFilePath}";`
        ].join("");

        if (!isDryRun) {

            fs.writeFileSync(
                path.join(projectPath, "mod.ts"),
                Buffer.from(modTsRaw, "utf8")
            );

        }else{

            console.log(`(dry) mod.ts\n\n${modTsRaw}\n`);

        }

    }

    /** Assert has been created with metadata */
    export function parseMetadata(
        params: {
            projectPath: string; // .
        }
    ): Metadata {

        const { projectPath } = params;

        const [, metadataJson] = fs.readFileSync(path.join(projectPath, "mod.ts"))
            .toString("utf8")
            .split("#")

        if (!metadataJson) {
            throw new Error("No metadata in mod.ts");
        }

        return JSON.parse(metadataJson);

    }

}